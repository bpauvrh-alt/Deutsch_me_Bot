import asyncio
import logging
import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputFile
from aiogram.filters import Command
from gtts import gTTS
from io import BytesIO
import random
from flask import Flask
import threading

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
API_TOKEN = "8216736672:AAHvpl2_KUk04U9ofPa5Fr4MPUwwk-XjIyk"  # <-- –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
DB_FILE = "german_bot.db"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
quiz_data = {}
last_vocab_id = None

# ==== Flask –¥–ª—è Uptime Robot ====
app = Flask("")

@app.route("/")
def home():
    return "Bot is running!"

def run_flask():
    app.run(host="0.0.0.0", port=5000)  # –ø–æ—Ä—Ç 5000, —á—Ç–æ–±—ã 8080 –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª

threading.Thread(target=run_flask, daemon=True).start()

# ==== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ====
async def init_db():
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS vocab (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            word TEXT,
            translation TEXT,
            example TEXT
        )""")
        cur = await db.execute("SELECT COUNT(*) FROM vocab")
        count = (await cur.fetchone())[0]
        if count == 0:
            sample = [
                ("Guten Morgen", "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "Guten Morgen! Wie geht's?"),
                ("Danke", "–°–ø–∞—Å–∏–±–æ", "Danke f√ºr deine Hilfe."),
                ("Bitte", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞", "Bitte sehr."),
                ("Entschuldigung", "–ò–∑–≤–∏–Ω–∏—Ç–µ", "Entschuldigung, wo ist die Toilette?"),
            ]
            await db.executemany("INSERT INTO vocab (word, translation, example) VALUES (?, ?, ?)", sample)
        await db.commit()

# ==== –ü–û–õ–£–ß–ï–ù–ò–ï –°–õ–£–ß–ê–ô–ù–û–ì–û –°–õ–û–í–ê ====
async def get_random_vocab(exclude_id=None):
    async with aiosqlite.connect(DB_FILE) as db:
        if exclude_id:
            cur = await db.execute(
                "SELECT id, word, translation, example FROM vocab WHERE id != ? ORDER BY RANDOM() LIMIT 1",
                (exclude_id,)
            )
        else:
            cur = await db.execute(
                "SELECT id, word, translation, example FROM vocab ORDER BY RANDOM() LIMIT 1"
            )
        row = await cur.fetchone()
        return row

# ==== –ì–ï–ù–ï–†–ê–¶–ò–Ø TTS –≤ –ø–∞–º—è—Ç–∏ ====
def make_tts_bytes(word):
    tts = gTTS(text=word, lang="de")
    bio = BytesIO()
    tts.write_to_fp(bio)
    bio.seek(0)
    return bio

# ==== /start ====
@dp.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *Deutsch_me_Bot*, –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ üá©üá™.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /vocab ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–ª–æ–≤–∞ —Å –æ–∑–≤—É—á–∫–æ–π\n"
        "‚Ä¢ /quiz ‚Äî –Ω–µ–±–æ–ª—å—à–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n"
        "‚Ä¢ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞"
    )
    await message.answer(text, parse_mode="Markdown")

# ==== /help ====
@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("üìö –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –Ω–∞—á–∞—Ç—å\n/vocab ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–ª–æ–≤–∞ —Å –æ–∑–≤—É—á–∫–æ–π\n/quiz ‚Äî –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞")

# ==== /vocab —Å –æ–∑–≤—É—á–∫–æ–π ====
@dp.message(Command("vocab"))
async def cmd_vocab(message: Message):
    global last_vocab_id
    vocab = await get_random_vocab(exclude_id=last_vocab_id)
    if not vocab:
        await message.answer("–°–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üò¢")
        return

    vid, word, translation, example = vocab
    last_vocab_id = vid

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data="next")]
    ])

    text = f"**{word}** ‚Äî {translation}\n\n_–ü—Ä–∏–º–µ—Ä:_ {example}"
    await message.answer(text, parse_mode="Markdown", reply_markup=kb)

    tts_audio = make_tts_bytes(word)
    await message.answer_audio(InputFile(tts_audio, filename=f"{word}.mp3"), caption=f"üéß {word}")

# ==== –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–µ–µ" ====
@dp.callback_query(F.data == "next")
async def callback_next(call: CallbackQuery):
    await call.answer()
    await cmd_vocab(call.message)

# ==== /quiz ====
@dp.message(Command("quiz"))
async def cmd_quiz(message: Message):
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute("SELECT id, word, translation FROM vocab ORDER BY RANDOM() LIMIT 1")
        row = await cur.fetchone()
        if not row:
            await message.answer("–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
            return
        vid, word, correct = row
        cur = await db.execute("SELECT translation FROM vocab WHERE id != ? ORDER BY RANDOM() LIMIT 3", (vid,))
        options = [correct] + [r[0] for r in await cur.fetchall()]

    random.shuffle(options)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=opt, callback_data=f"ans:{vid}:{i}")] for i, opt in enumerate(options)
    ])

    quiz_data[f"quiz_{vid}"] = {"options": options, "correct": correct}
    await message.answer(f"–ß—Ç–æ –∑–Ω–∞—á–∏—Ç —Å–ª–æ–≤–æ *{word}*?", parse_mode="Markdown", reply_markup=kb)

@dp.callback_query(F.data.startswith("ans:"))
async def callback_answer(call: CallbackQuery):
    _, vid, idx = call.data.split(":")
    vid = int(vid)
    idx = int(idx)
    data = quiz_data.get(f"quiz_{vid}")
    if not data:
        await call.message.answer("–û—à–∏–±–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã üò¢")
        await call.answer()
        return

    chosen = data["options"][idx]
    correct = data["correct"]

    if chosen == correct:
        await call.message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await call.message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}")
    await call.answer()

# ==== –ó–ê–ü–£–°–ö ====
async def main():
    await init_db()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ‚úÖ")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())